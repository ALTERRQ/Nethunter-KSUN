#!/sbin/sh
## Kali NetHunter installer
##
## Detect bootmode
##   BOOTMODE=true  = Device has booted into system (NetHunter installed as KernelSU module)
##   BOOTMODE=false = Device has booted into recovery (Not supported)
##
## Apps
##   NetHunter.apk
##     https://gitlab.com/kalilinux/nethunter/apps/kali-nethunter-app
##     https://store.nethunter.com/packages/com.offsec.nethunter/
##   NetHunterTerminal.apk
##     https://gitlab.com/kalilinux/nethunter/apps/kali-nethunter-term
##     https://store.nethunter.com/packages/com.offsec.nhterm/
##   NetHunterKeX.apk
##     https://gitlab.com/kalilinux/nethunter/apps/kali-nethunter-kex
##     https://store.nethunter.com/packages/com.offsec.nethunter.kex/
##   NetHunterStore.apk
##     https://gitlab.com/kalilinux/nethunter/apps/kali-nethunter-store-client
##     https://store.nethunter.com/packages/com.offsec.nethunter.store/
##   NetHunterStorePrivilegedExtension.apk
##     https://gitlab.com/kalilinux/nethunter/apps/kali-nethunter-store-privileged-extension
##     https://store.nethunter.com/packages/com.offsec.nethunter.store.privileged/

#set -e
#set -x

#------------------------------------------------------------------------------

# KernelSU - echo     (really, any output on stdout, not stderr)
print() {
    echo "${1}"
}

debug() {
  [ -n "$DEBUG" ] && print "@ $1"
}

# extract <ZIP FILE> <OUT DIR> [<SKIP>]
extract() {
  rm -rf "$2"
  mkdir -p "$2"
  unzip -o "$1" -d "$2" -x "$3" >&2 ||
    abort "Failed to extract! The zip may be corrupt or your device may not have enough RAM to proceed. Consider using a smaller installer if it is available" # Or ARM 32 device doing a too big ZIP file
}

# extract_file <ZIP FILE> <FILE TO EXTRACT> <OUT DIR>
extract_file() {
  rm -rf "$3"
  mkdir -p "$3"
  unzip -o "$1" "$2" -d "$3" >&2 ||
    abort "Failed to extract! The zip may be corrupt or your device may not have enough RAM to proceed. Consider using a smaller installer if it is available" # Or ARM 32 device doing a too big ZIP file
}

#------------------------------------------------------------------------------

if [ "$3" ]; then
  ZIPFILE=$3
  console=/proc/$$/fd/$2
  # Write the location of the console buffer to /tmp/console for other scripts to use
  [ -d /tmp ] && echo "$console" > /tmp/console        # Magisk doesn't have /tmp
else
  [ -f /tmp/console ] && console=$(cat /tmp/console)   # Magisk doesn't have /tmp
  [ "$console" ] || console=/proc/$$/fd/1
fi

DEBUG=${DEBUG:-}
TMPDIR=/dev/tmp
export TMP=$TMPDIR/nethunter # Doesn't matter if sh / source

#------------------------------------------------------------------------------

print ""
print "################################################"
print "#                                              #"
print "#  88      a8P         db        88        88  #"
print "#  88    .88'         d88b       88        88  #"
print "#  88   88'          d8''8b      88        88  #"
print "#  88 d88           d8'  '8b     88        88  #"
print "#  8888'88.        d8YaaaaY8b    88        88  #"
print "#  88P   Y8b      d8''''''''8b   88        88  #"
print "#  88     '88.   d8'        '8b  88        88  #"
print "#  88       Y8b d8'          '8b 888888888 88  #"
print "#                                              #"
print "###  ############# NetHunter ###################"
print ""

print "* NetHunter (KernelSU)"
debug "Debug Mode: Enabled"
print ""

if $BOOTMODE; then
  #####################################################
  ## Install in KernelSU                             ##
  ##   ./scripts/util_functions.sh: install_module() ##
  #####################################################
  set_perm() {
    chown $2:$3 $1 || return 1
    chmod $4 $1 || return 1
    CON=$5
    [ -z $CON ] && CON=u:object_r:system_file:s0
    chcon $CON $1 || return 1
  }

  set_perm_recursive() {
    find $1 -type d 2>/dev/null | while read dir; do
      set_perm $dir $2 $3 $4 $6
    done

    find $1 -type f -o -type l 2>/dev/null | while read file; do
      set_perm $file $2 $3 $5 $6
    done
  }

  ## Make setup_flashable() happy
  OUTFD=${OUTFD:- $2} # May already be defined 

  print "* Unpacking script"
  extract_file "$ZIPFILE" META-INF/com/google/android/update-kernelsu $TMP
  #print "* Script unpacked"


  ## Default permissions
  set_perm_recursive $TMP 0 0 0755 0644
  ## Run KernelSU script (aka what would load customization script - ./nethunter/customize.sh)
  [ -f $TMP/META-INF/com/google/android/update-kernelsu ] && source $TMP/META-INF/com/google/android/update-kernelsu    # Don't spawn a new session (aka using sh), do in current session (able to pass variables/functions)

print ""
print "################################################"
print "#       Kali NetHunter is now installed!       #"
print "################################################"
## This is a work around an Android permission issue
print "#   Please UPDATE the NetHunter app via the    #"
print "#  NetHunter Store before RUNNING it to finish #"
print "#            setting everything up!            #"
print "################################################"
print ""

else
  print "Recovery detected, abort!"
  print "Please use KernelSU manager for installation!"
  abort
fi
